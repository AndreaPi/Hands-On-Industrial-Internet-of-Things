/*
 * Copyright 2010-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 */

const FUNCTION_ARN_REGEX = new RegExp('^arn:aws:lambda:([a-z]{2}-[a-z]+-\\d)?:(\\d{12})?:function:([a-zA-Z0-9-_]+)(?::(\\$?[a-zA-Z0-9-_]+))?$');
const REGION_REGEX_INDEX = 1;
const ACCOUNT_ID_REGEX_INDEX = 2;
const FUNCTION_NAME_REGEX_INDEX = 3;
const QUALIFIER_REGEX_INDEX = 4;

exports.buildArnString = function buildArnString(region, accountId, functionName, functionQualifier) {
    // Region, accountID and qualifier can be empty for system lambdas, so if that's the case explicitly set them to the
    // empty string so our arns don't show up with "null" or "undefined" in them.
    const regionString = region === undefined || region == null ? '' : region;
    const accountIdString = accountId === undefined || accountId == null ? '' : accountId;

    // We include the colon only if a qualifier was given as it needs to be left out if the qualifier is not present
    const functionQualifierString = functionQualifier
        ? `:${functionQualifier}`
        : '';

    // functionName is required
    if (!functionName) {
        throw new Error(`Cannot construct arn string with missing function name field. Provided function name: ${functionName}`);
    }

    return `arn:aws:lambda:${regionString}:${accountIdString}:function:${functionName}${functionQualifierString}`;
};

exports.FunctionArnFields = class FunctionArnFields {
    constructor(functionArnString) {
        const matchResult = functionArnString.match(FUNCTION_ARN_REGEX);
        if (!matchResult) {
            throw new Error(`Cannot parse given string as a function ARN: ${functionArnString}`);
        }

        this.region = matchResult[REGION_REGEX_INDEX];
        this.accountId = matchResult[ACCOUNT_ID_REGEX_INDEX];
        this.name = matchResult[FUNCTION_NAME_REGEX_INDEX];
        this.qualifier = matchResult[QUALIFIER_REGEX_INDEX];
    }

    toString() {
        return exports.buildArnString(this.region, this.accountId, this.name, this.qualifier);
    }
};
